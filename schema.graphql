type User @entity {
  id: ID! # userAddress
  ensName: String!
  timestamp: BigInt!
}

type Colony @entity {
  id: ID! # Address
  index: BigInt!
  token: String! # Address
  timestamp: BigInt!
}

# Should not be in root query
type Domain @entity {
  id: ID! # colonyAddress_domainId
  colonyAddress: Bytes!
  index: BigInt!
  parent: Bytes!
  timestamp: BigInt!
}

# Should not be in root query
type ColonyRoles @entity {
  id: ID! # colonyAddress_domainId_userAddress
  user: Bytes!
  domain: String!
  administration: Boolean!
  timestamp: BigInt!
  # TODO: other roles
}

type Skill @entity {
  id: ID!
  index: BigInt!
  parent: Skill
  timestamp: BigInt!
}

type Task @entity {
  id: ID!
  colonyAddress: Bytes!
  taskId: BigInt!
  status: String!
  timestamp: BigInt!
}

# enum TaskRole { Manager, Evaluator, Worker }
type TaskPayout @entity {
  id: ID!
  colonyAddress: Bytes!
  taskId: BigInt!
  role: Int!
  token: Bytes!
  amount: BigInt!
  timestamp: BigInt!
}
